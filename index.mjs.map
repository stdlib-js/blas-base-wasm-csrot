{"version":3,"file":"index.mjs","sources":["../lib/binary.browser.js","../lib/module.js","../lib/routine.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport base64ToUint8Array from '@stdlib/string-base-base64-to-uint8array';\n\n\n// MAIN //\n\nvar wasm = base64ToUint8Array( 'AGFzbQEAAAAADwhkeWxpbmsuMAEEAAAAAAEaA2AAAGAHf39/f399fQBgCX9/f39/f399fQACDwEDZW52Bm1lbW9yeQIAAAMEAwABAgdMBBFfX3dhc21fY2FsbF9jdG9ycwAAGF9fd2FzbV9hcHBseV9kYXRhX3JlbG9jcwAAB2NfY3Nyb3QAAQ9jX2Nzcm90X25kYXJyYXkAAgr6AgMDAAELxgECBX8CfSAAQQBKBEBBASAAayIHIARsQQF0QQAgBEEATBshCCACIAdsQQF0QQAgAkEATBshByAEQQF0IQogAkEBdCELA0AgAyAIQQJ0aiICIAUgAioCACIMlCAGIAEgB0ECdGoiBCoCACINlJM4AgAgBCAFIA2UIAYgDJSSOAIAIAIgBSACKgIEIgyUIAYgBCoCBCINlJM4AgQgBCAFIA2UIAYgDJSSOAIEIAggCmohCCAHIAtqIQcgCUEBaiIJIABHDQALCwurAQICfQN/IABBAEoEQCAGQQF0IQYgA0EBdCEDIAVBAXQhDCACQQF0IQ0DQCAEIAZBAnRqIgIgByACKgIAIgmUIAggASADQQJ0aiIFKgIAIgqUkzgCACAFIAcgCpQgCCAJlJI4AgAgAiAHIAIqAgQiCZQgCCAFKgIEIgqUkzgCBCAFIAcgCpQgCCAJlJI4AgQgBiAMaiEGIAMgDWohAyALQQFqIgsgAEcNAAsLCw==' );\n\n\n// EXPORTS //\n\nexport default wasm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport isWebAssemblyMemory from '@stdlib/assert-is-wasm-memory';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport inherits from '@stdlib/utils-inherit';\nimport WasmModule from '@stdlib/wasm-module-wrapper';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport wasmBinary from './binary.js';\n\n\n// MAIN //\n\n/**\n* BLAS routine WebAssembly module wrapper constructor.\n*\n* @constructor\n* @param {Object} memory - WebAssembly memory instance\n* @throws {TypeError} must provide a WebAssembly memory instance\n* @returns {Module} module instance\n*\n* @example\n* import Memory from '@stdlib/wasm-memory';\n* import oneTo from '@stdlib/array-one-to';\n* import ones from '@stdlib/array-ones';\n* import zeros from '@stdlib/array-zeros';\n* import bytesPerElement from '@stdlib/ndarray-base-bytes-per-element';\n* import Complex64Array from '@stdlib/array-complex64';\n* import reinterpretComplex64 from '@stdlib/strided-base-reinterpret-complex64';\n*\n* // Create a new memory instance with an initial size of 10 pages (320KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var csrot = new Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* csrot.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'complex64';\n*\n* // Specify a vector length:\n* var N = 5;\n*\n* // Define pointers (i.e., byte offsets) for storing input vectors:\n* var cxptr = 0;\n* var cyptr = N * bytesPerElement( dtype );\n*\n* // Write vector values to module memory:\n* var xbuf = oneTo( N*2, 'float32' );\n* var cx = new Complex64Array( xbuf.buffer );\n* csrot.write( cxptr, cx );\n*\n* var ybuf = ones( N*2, 'float32' );\n* var cy = new Complex64Array( ybuf.buffer );\n* csrot.write( cyptr, cy );\n*\n* // Perform computation:\n* var ptr = csrot.main( N, cxptr, 1, cyptr, 1, 0.8, 0.6 );\n* // returns <number>\n*\n* var bool = ( ptr === cyptr );\n* // returns true\n*\n* // Read out the results:\n* var viewX = zeros( N, dtype );\n* var viewY = zeros( N, dtype );\n* csrot.read( cxptr, viewX );\n* csrot.read( cyptr, viewY );\n*\n* console.log( reinterpretComplex64( viewY, 0 ) );\n* // => <Float32Array>[ ~0.2, ~-0.4, -1.0, ~-1.6, ~-2.2, ~-2.8, ~-3.4, -4.0, ~-4.6, ~-5.2 ]\n*\n* console.log( reinterpretComplex64( viewX, 0 ) );\n* // => <Float32Array>[ ~1.4, ~2.2, 3.0, ~3.8, ~4.6, ~5.4, ~6.2, 7.0, ~7.8, ~8.6 ]\n*/\nfunction Module( memory ) {\n\tif ( !( this instanceof Module ) ) {\n\t\treturn new Module( memory );\n\t}\n\tif ( !isWebAssemblyMemory( memory ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a WebAssembly memory instance. Value: `%s`.', memory ) );\n\t}\n\t// Call the parent constructor:\n\tWasmModule.call( this, wasmBinary, memory, {\n\t\t'env': {\n\t\t\t'memory': memory\n\t\t}\n\t});\n\n\treturn this;\n}\n\n// Inherit from the parent constructor:\ninherits( Module, WasmModule );\n\n/**\n* Applies a plane rotation.\n*\n* @name main\n* @memberof Module.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NonNegativeInteger} cxptr - first input array pointer (i.e., byte offset)\n* @param {integer} strideX - `cx` stride length\n* @param {NonNegativeInteger} cyptr - second input array pointer (i.e., byte offset)\n* @param {integer} strideY - `cy` stride length\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {NonNegativeInteger} input array pointer `cy` (i.e., byte offset)\n*\n* @example\n* import Memory from '@stdlib/wasm-memory';\n* import oneTo from '@stdlib/array-one-to';\n* import ones from '@stdlib/array-ones';\n* import zeros from '@stdlib/array-zeros';\n* import bytesPerElement from '@stdlib/ndarray-base-bytes-per-element';\n* import Complex64Array from '@stdlib/array-complex64';\n* import reinterpretComplex64 from '@stdlib/strided-base-reinterpret-complex64';\n*\n* // Create a new memory instance with an initial size of 10 pages (320KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var csrot = new Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* csrot.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'complex64';\n*\n* // Specify a vector length:\n* var N = 5;\n*\n* // Define pointers (i.e., byte offsets) for storing input vectors:\n* var cxptr = 0;\n* var cyptr = N * bytesPerElement( dtype );\n*\n* // Write vector values to module memory:\n* var xbuf = oneTo( N*2, 'float32' );\n* var cx = new Complex64Array( xbuf.buffer );\n* csrot.write( cxptr, cx );\n*\n* var ybuf = ones( N*2, 'float32' );\n* var cy = new Complex64Array( ybuf.buffer );\n* csrot.write( cyptr, cy );\n*\n* // Perform computation:\n* var ptr = csrot.main( N, cxptr, 1, cyptr, 1, 0.8, 0.6 );\n* // returns <number>\n*\n* var bool = ( ptr === cyptr );\n* // returns true\n*\n* // Read out the results:\n* var viewX = zeros( N, dtype );\n* var viewY = zeros( N, dtype );\n* csrot.read( cxptr, viewX );\n* csrot.read( cyptr, viewY );\n*\n* console.log( reinterpretComplex64( viewY, 0 ) );\n* // => <Float32Array>[ ~0.2, ~-0.4, -1.0, ~-1.6, ~-2.2, ~-2.8, ~-3.4, -4.0, ~-4.6, ~-5.2 ]\n*\n* console.log( reinterpretComplex64( viewX, 0 ) );\n* // => <Float32Array>[ ~1.4, ~2.2, 3.0, ~3.8, ~4.6, ~5.4, ~6.2, 7.0, ~7.8, ~8.6 ]\n*/\nsetReadOnly( Module.prototype, 'main', function csrot( N, cxptr, strideX, cyptr, strideY, c, s ) { // eslint-disable-line stdlib/jsdoc-doctest-decimal-point\n\tthis._instance.exports.c_csrot( N, cxptr, strideX, cyptr, strideY, c, s );\n\treturn cyptr;\n});\n\n/**\n* Applies a plane rotation using alternative indexing semantics.\n*\n* @name ndarray\n* @memberof Module.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NonNegativeInteger} cxptr - first input array pointer (i.e., byte offset)\n* @param {integer} strideX - `cx` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `cx`\n* @param {NonNegativeInteger} cyptr - second input array pointer (i.e., byte offset)\n* @param {integer} strideY - `cy` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `cy`\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {NonNegativeInteger} input array pointer `cy` (i.e., byte offset)\n*\n* @example\n* import Memory from '@stdlib/wasm-memory';\n* import oneTo from '@stdlib/array-one-to';\n* import ones from '@stdlib/array-ones';\n* import zeros from '@stdlib/array-zeros';\n* import bytesPerElement from '@stdlib/ndarray-base-bytes-per-element';\n* import Complex64Array from '@stdlib/array-complex64';\n* import reinterpretComplex64 from '@stdlib/strided-base-reinterpret-complex64';\n*\n* // Create a new memory instance with an initial size of 10 pages (320KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var csrot = new Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* csrot.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'complex64';\n*\n* // Specify a vector length:\n* var N = 5;\n*\n* // Define pointers (i.e., byte offsets) for storing input vectors:\n* var cxptr = 0;\n* var cyptr = N * bytesPerElement( dtype );\n*\n* // Write vector values to module memory:\n* var xbuf = oneTo( N*2, 'float32' );\n* var cx = new Complex64Array( xbuf.buffer );\n* csrot.write( cxptr, cx );\n*\n* var ybuf = ones( N*2, 'float32' );\n* var cy = new Complex64Array( ybuf.buffer );\n* csrot.write( cyptr, cy );\n*\n* // Perform computation:\n* var ptr = csrot.ndarray( N, cxptr, 1, 0, cyptr, 1, 0, 0.8, 0.6 );\n* // returns <number>\n*\n* var bool = ( ptr === cyptr );\n* // returns true\n*\n* // Read out the results:\n* var viewX = zeros( N, dtype );\n* var viewY = zeros( N, dtype );\n* csrot.read( cxptr, viewX );\n* csrot.read( cyptr, viewY );\n*\n* console.log( reinterpretComplex64( viewY, 0 ) );\n* // => <Float32Array>[ ~0.2, ~-0.4, -1.0, ~-1.6, ~-2.2, ~-2.8, ~-3.4, -4.0, ~-4.6, ~-5.2 ]\n*\n* console.log( reinterpretComplex64( viewX, 0 ) );\n* // => <Float32Array>[ ~1.4, ~2.2, 3.0, ~3.8, ~4.6, ~5.4, ~6.2, 7.0, ~7.8, ~8.6 ]\n*/\nsetReadOnly( Module.prototype, 'ndarray', function csrot( N, cxptr, strideX, offsetX, cyptr, strideY, offsetY, c, s ) { // eslint-disable-line stdlib/jsdoc-doctest-decimal-point\n\tthis._instance.exports.c_csrot_ndarray( N, cxptr, strideX, offsetX, cyptr, strideY, offsetY, c, s ); // eslint-disable-line max-len\n\treturn cyptr;\n});\n\n\n// EXPORTS //\n\nexport default Module;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport inherits from '@stdlib/utils-inherit';\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport { ndarray as readDataView } from '@stdlib/strided-base-read-dataview';\nimport Memory from '@stdlib/wasm-memory';\nimport arrays2ptrs from '@stdlib/wasm-base-arrays2ptrs';\nimport strided2object from '@stdlib/wasm-base-strided2object';\nimport Module from './module.js';\n\n\n// MAIN //\n\n/**\n* Routine constructor.\n*\n* @private\n* @constructor\n* @returns {Routine} routine instance\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import realf from '@stdlib/complex-float32-real';\n* import imagf from '@stdlib/complex-float32-imag';\n*\n* // Create a new routine:\n* var csrot = new Routine();\n*\n* // Initialize the module:\n* csrot.initializeSync();\n*\n* // Define strided arrays...\n* var cx = new Complex64Array( [ -1.0, -2.0, -3.0, -4.0, -5.0, -6.0 ] );\n* var cy = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n*\n* // Perform operation:\n* csrot.main( cx.length, cx, 1, cy, 1, 0.8, 0.6 );\n*\n* var v = cx.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( v );\n* // returns ~-0.2\n*\n* var im = imagf( v );\n* // returns ~-0.4\n*\n* v = cy.get( 0 );\n* // returns <Complex64>\n*\n* re = realf( v );\n* // returns ~1.4\n*\n* im = imagf( v );\n* // returns ~2.8\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import realf from '@stdlib/complex-float32-real';\n* import imagf from '@stdlib/complex-float32-imag';\n*\n* // Create a new routine:\n* var csrot = new Routine();\n*\n* // Initialize the module:\n* csrot.initializeSync();\n*\n* // Define strided arrays...\n* var cx = new Complex64Array( [ -1.0, -2.0, -3.0, -4.0, -5.0, -6.0 ] );\n* var cy = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n*\n* // Perform operation:\n* csrot.ndarray( cx.length, cx, 1, 0, cy, 1, 0, 0.8, 0.6 );\n*\n* var v = cx.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( v );\n* // returns ~-0.2\n*\n* var im = imagf( v );\n* // returns ~-0.4\n*\n* v = cy.get( 0 );\n* // returns <Complex64>\n*\n* re = realf( v );\n* // returns ~1.4\n*\n* im = imagf( v );\n* // returns ~2.8\n*/\nfunction Routine() {\n\tif ( !( this instanceof Routine ) ) {\n\t\treturn new Routine();\n\t}\n\tModule.call( this, new Memory({\n\t\t'initial': 0\n\t}));\n\treturn this;\n}\n\n// Inherit from the parent constructor:\ninherits( Routine, Module );\n\n/**\n* Applies a plane rotation.\n*\n* @name main\n* @memberof Routine.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - first input array\n* @param {integer} strideX - `cx` stride length\n* @param {Complex64Array} cy - second input array\n* @param {integer} strideY - `cy` stride length\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Complex64Array} input array `cy`\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import realf from '@stdlib/complex-float32-real';\n* import imagf from '@stdlib/complex-float32-imag';\n*\n* // Create a new routine:\n* var csrot = new Routine();\n*\n* // Initialize the module:\n* csrot.initializeSync();\n*\n* // Define strided arrays...\n* var cx = new Complex64Array( [ -1.0, -2.0, -3.0, -4.0, -5.0, -6.0 ] );\n* var cy = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n*\n* // Perform operation:\n* csrot.main( cx.length, cx, 1, cy, 1, 0.8, 0.6 );\n*\n* var v = cx.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( v );\n* // returns ~-0.2\n*\n* var im = imagf( v );\n* // returns ~-0.4\n*\n* v = cy.get( 0 );\n* // returns <Complex64>\n*\n* re = realf( v );\n* // returns ~1.4\n*\n* im = imagf( v );\n* // returns ~2.8\n*/\nsetReadOnly( Routine.prototype, 'main', function csrot( N, cx, strideX, cy, strideY, c, s ) {\n\treturn this.ndarray( N, cx, strideX, stride2offset( N, strideX ), cy, strideY, stride2offset( N, strideY ), c, s ); // eslint-disable-line max-len\n});\n\n/**\n* Applies a plane rotation using alternative indexing semantics.\n*\n* @name ndarray\n* @memberof Routine.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64Array} cx - first input array\n* @param {integer} strideX - `cx` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `cx`\n* @param {Complex64Array} cy - second input array\n* @param {integer} strideY - `cy` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `cy`\n* @param {number} c - cosine of the angle of rotation\n* @param {number} s - sine of the angle of rotation\n* @returns {Complex64Array} input array `cy`\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import realf from '@stdlib/complex-float32-real';\n* import imagf from '@stdlib/complex-float32-imag';\n*\n* // Create a new routine:\n* var csrot = new Routine();\n*\n* // Initialize the module:\n* csrot.initializeSync();\n*\n* // Define strided arrays...\n* var cx = new Complex64Array( [ -1.0, -2.0, -3.0, -4.0, -5.0, -6.0 ] );\n* var cy = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n*\n* // Perform operation:\n* csrot.ndarray( cx.length, cx, 1, 0, cy, 1, 0, 0.8, 0.6 );\n*\n* var v = cx.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( v );\n* // returns ~-0.2\n*\n* var im = imagf( v );\n* // returns ~-0.4\n*\n* v = cy.get( 0 );\n* // returns <Complex64>\n*\n* re = realf( v );\n* // returns ~1.4\n*\n* im = imagf( v );\n* // returns ~2.8\n*/\nsetReadOnly( Routine.prototype, 'ndarray', function csrot( N, cx, strideX, offsetX, cy, strideY, offsetY, c, s ) {\n\tvar ptrs;\n\tvar p0;\n\tvar p1;\n\n\t// Convert the input arrays to \"pointers\" in the module's memory:\n\tptrs = arrays2ptrs( this, [\n\t\tstrided2object( N, cx, strideX, offsetX ),\n\t\tstrided2object( N, cy, strideY, offsetY )\n\t]);\n\tp0 = ptrs[0];\n\tp1 = ptrs[1];\n\n\t// Perform computation by calling the corresponding parent method:\n\tModule.prototype.ndarray.call( this, N, p0.ptr, p0.stride, p0.offset, p1.ptr, p1.stride, p1.offset, c, s ); // eslint-disable-line max-len\n\n\t// If input array data had to be copied to module memory, copy the results to the provided arrays...\n\tif ( p0.copy ) {\n\t\treadDataView( N, this.view, p0.stride*p0.BYTES_PER_ELEMENT, p0.ptr, cx, strideX, offsetX, true ); // eslint-disable-line max-len\n\t}\n\tif ( p1.copy ) {\n\t\treadDataView( N, this.view, p1.stride*p1.BYTES_PER_ELEMENT, p1.ptr, cy, strideY, offsetY, true ); // eslint-disable-line max-len\n\t}\n\treturn cy;\n});\n\n\n// EXPORTS //\n\nexport default Routine;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Routine from './routine.js';\n\n\n// MAIN //\n\n/**\n* WebAssembly module to apply a plane rotation.\n*\n* @name csrot\n* @type {Routine}\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import realf from '@stdlib/complex-float32-real';\n* import imagf from '@stdlib/complex-float32-imag';\n*\n* // Define strided arrays...\n* var cx = new Complex64Array( [ -1.0, -2.0, -3.0, -4.0, -5.0, -6.0 ] );\n* var cy = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n*\n* // Perform operation:\n* csrot.main( cx.length, cx, 1, cy, 1, 0.8, 0.6 );\n*\n* var v = cx.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( v );\n* // returns ~-0.2\n*\n* var im = imagf( v );\n* // returns ~-0.4\n*\n* v = cy.get( 0 );\n* // returns <Complex64>\n*\n* re = realf( v );\n* // returns ~1.4\n*\n* im = imagf( v );\n* // returns ~2.8\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import realf from '@stdlib/complex-float32-real';\n* import imagf from '@stdlib/complex-float32-imag';\n*\n* // Define a strided arrays...\n* var cx = new Complex64Array( [ -1.0, -2.0, -3.0, -4.0, -5.0, -6.0 ] );\n* var cy = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n*\n* // Perform operation:\n* csrot.ndarray( cx.length, cx, 1, 0, cy, 1, 0, 0.8, 0.6 );\n*\n* var v = cx.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( v );\n* // returns ~-0.2\n*\n* var im = imagf( v );\n* // returns ~-0.4\n*\n* v = cy.get( 0 );\n* // returns <Complex64>\n*\n* re = realf( v );\n* // returns ~1.4\n*\n* im = imagf( v );\n* // returns ~2.8\n*/\nvar csrot = new Routine();\ncsrot.initializeSync(); // eslint-disable-line node/no-sync\n\n\n// EXPORTS //\n\nexport default csrot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* WebAssembly routine to apply a plane rotation.\n*\n* @module @stdlib/blas-base-wasm-csrot\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import realf from '@stdlib/complex-float32-real';\n* import imagf from '@stdlib/complex-float32-imag';\n* import csrot from '@stdlib/blas-base-wasm-csrot';\n*\n* // Define strided arrays...\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var cy = new Complex64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Perform operation:\n* csrot.main( cx.length, cx, 1, cy, 1, 0.8, 0.6 );\n*\n* var v = cx.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( v );\n* // returns 5.0\n*\n* var im = imagf( v );\n* // returns ~6.4\n*\n* v = cy.get( 0 );\n* // returns <Complex64>\n*\n* re = realf( v );\n* // returns 5.0\n*\n* im = imagf( v );\n* // returns ~5.2\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32-ctor';\n* import realf from '@stdlib/complex-float32-real';\n* import imagf from '@stdlib/complex-float32-imag';\n* import csrot from '@stdlib/blas-base-wasm-csrot';\n*\n* // Define strided arrays...\n* var cx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var cy = new Complex64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n*\n* // Perform operation:\n* csrot.ndarray( cx.length, cx, 1, 0, cy, 1, 0, 0.8, 0.6 );\n*\n* var v = cx.get( 0 );\n* // returns <Complex64>\n*\n* var re = realf( v );\n* // returns 5.0\n*\n* var im = imagf( v );\n* // returns ~6.4\n*\n* v = cy.get( 0 );\n* // returns <Complex64>\n*\n* re = realf( v );\n* // returns 5.0\n*\n* im = imagf( v );\n* // returns ~5.2\n*\n* @example\n* import Memory from '@stdlib/wasm-memory';\n* import oneTo from '@stdlib/array-one-to';\n* import ones from '@stdlib/array-ones';\n* import zeros from '@stdlib/array-zeros';\n* import bytesPerElement from '@stdlib/ndarray-base-bytes-per-element';\n* import Complex64Array from '@stdlib/array-complex64';\n* import reinterpretComplex64 from '@stdlib/strided-base-reinterpret-complex64';\n* import csrot from '@stdlib/blas-base-wasm-csrot';\n*\n* // Create a new memory instance with an initial size of 10 pages (320KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var mod = new csrot.Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* mod.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'complex64';\n*\n* // Specify a vector length:\n* var N = 5;\n*\n* // Define pointers (i.e., byte offsets) for storing input vectors:\n* var cxptr = 0;\n* var cyptr = N * bytesPerElement( dtype );\n*\n* // Write vector values to module memory:\n* var xbuf = oneTo( N*2, 'float32' );\n* var cx = new Complex64Array( xbuf.buffer );\n* mod.write( cxptr, cx );\n*\n* var ybuf = ones( N*2, 'float32' );\n* var cy = new Complex64Array( ybuf.buffer );\n* mod.write( cyptr, cy );\n*\n* // Perform computation:\n* mod.main( N, cxptr, 1, cyptr, 1, 0.8, 0.6 );\n*\n* // Read out the results:\n* var viewX = zeros( N, dtype );\n* var viewY = zeros( N, dtype );\n* mod.read( cxptr, viewX );\n* mod.read( cyptr, viewY );\n*\n* console.log( reinterpretComplex64( viewY, 0 ) );\n* // => <Float32Array>[ ~0.2, ~-0.4, -1.0, ~-1.6, ~-2.2, ~-2.8, ~-3.4, -4.0, ~-4.6, ~-5.2 ]\n*\n* console.log( reinterpretComplex64( viewX, 0 ) );\n* // => <Float32Array>[ ~1.4, ~2.2, 3.0, ~3.8, ~4.6, ~5.4, ~6.2, 7.0, ~7.8, ~8.6 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport Module from './module.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'Module', Module );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"Module\": \"main.Module\" }\n"],"names":["wasm","base64ToUint8Array","Module","memory","this","isWebAssemblyMemory","TypeError","format","WasmModule","call","wasmBinary","env","Routine","Memory","initial","inherits","setReadOnly","prototype","N","cxptr","strideX","cyptr","strideY","c","s","_instance","exports","c_csrot","offsetX","offsetY","c_csrot_ndarray","cx","cy","ndarray","stride2offset","ptrs","p0","p1","arrays2ptrs","strided2object","ptr","stride","offset","copy","readDataView","view","BYTES_PER_ELEMENT","csrot","initializeSync","main"],"mappings":";;8hCA2BA,IAAIA,EAAOC,EAAoB,gtBC2E/B,SAASC,EAAQC,GAChB,KAAQC,gBAAgBF,GACvB,OAAO,IAAIA,EAAQC,GAEpB,IAAME,EAAqBF,GAC1B,MAAM,IAAIG,UAAWC,EAAQ,6EAA8EJ,IAS5G,OANAK,EAAWC,KAAML,KAAMM,EAAYP,EAAQ,CAC1CQ,IAAO,CACNR,OAAUA,KAILC,IACR,CCFA,SAASQ,IACR,OAAQR,gBAAgBQ,GAGxBV,EAAOO,KAAML,KAAM,IAAIS,EAAO,CAC7BC,QAAW,KAELV,MALC,IAAIQ,CAMb,CDHAG,EAAUb,EAAQM,GA8ElBQ,EAAad,EAAOe,UAAW,QAAQ,SAAgBC,EAAGC,EAAOC,EAASC,EAAOC,EAASC,EAAGC,GAE5F,OADApB,KAAKqB,UAAUC,QAAQC,QAAST,EAAGC,EAAOC,EAASC,EAAOC,EAASC,EAAGC,GAC/DH,CACR,IAgFAL,EAAad,EAAOe,UAAW,WAAW,SAAgBC,EAAGC,EAAOC,EAASQ,EAASP,EAAOC,EAASO,EAASN,EAAGC,GAEjH,OADApB,KAAKqB,UAAUC,QAAQI,gBAAiBZ,EAAGC,EAAOC,EAASQ,EAASP,EAAOC,EAASO,EAASN,EAAGC,GACzFH,CACR,IC9JAN,EAAUH,EAASV,GAsDnBc,EAAaJ,EAAQK,UAAW,QAAQ,SAAgBC,EAAGa,EAAIX,EAASY,EAAIV,EAASC,EAAGC,GACvF,OAAOpB,KAAK6B,QAASf,EAAGa,EAAIX,EAASc,EAAehB,EAAGE,GAAWY,EAAIV,EAASY,EAAehB,EAAGI,GAAWC,EAAGC,EAChH,IAwDAR,EAAaJ,EAAQK,UAAW,WAAW,SAAgBC,EAAGa,EAAIX,EAASQ,EAASI,EAAIV,EAASO,EAASN,EAAGC,GAC5G,IAAIW,EACAC,EACAC,EAoBJ,OAbAD,GAJAD,EAAOG,EAAalC,KAAM,CACzBmC,EAAgBrB,EAAGa,EAAIX,EAASQ,GAChCW,EAAgBrB,EAAGc,EAAIV,EAASO,MAEvB,GACVQ,EAAKF,EAAK,GAGVjC,EAAOe,UAAUgB,QAAQxB,KAAML,KAAMc,EAAGkB,EAAGI,IAAKJ,EAAGK,OAAQL,EAAGM,OAAQL,EAAGG,IAAKH,EAAGI,OAAQJ,EAAGK,OAAQnB,EAAGC,GAGlGY,EAAGO,MACPC,EAAc1B,EAAGd,KAAKyC,KAAMT,EAAGK,OAAOL,EAAGU,kBAAmBV,EAAGI,IAAKT,EAAIX,EAASQ,GAAS,GAEtFS,EAAGM,MACPC,EAAc1B,EAAGd,KAAKyC,KAAMR,EAAGI,OAAOJ,EAAGS,kBAAmBT,EAAGG,IAAKR,EAAIV,EAASO,GAAS,GAEpFG,CACR,ICzKG,IAACe,EAAQ,IAAInC,EAChBmC,EAAMC,iBC6DNhC,EAAAiC,EAAA,SAAA/C"}